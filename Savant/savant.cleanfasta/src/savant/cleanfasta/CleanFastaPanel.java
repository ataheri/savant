/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NewJPanel.java
 *
 * Created on Dec 10, 2010, 11:09:42 AM
 */

package savant.cleanfasta;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.biojava.bio.BioException;
import org.biojava.bio.seq.Sequence;
import org.biojava.bio.seq.SequenceIterator;
import org.biojava.bio.seq.db.HashSequenceDB;
import org.biojava.bio.seq.db.SequenceDB;
import org.biojava.bio.seq.io.SeqIOTools;
import org.biojava.bio.symbol.Alphabet;
import org.biojava.bio.symbol.AlphabetManager;
import org.biojavax.bio.seq.RichSequence;
import savant.api.util.DialogUtils;

/**
 *
 * @author mfiume
 */
public class CleanFastaPanel extends javax.swing.JPanel {

    /** Creates new form NewJPanel */
    public CleanFastaPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        in = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        ret = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        out = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        jLabel1.setText("Input Fasta File:");

        jLabel2.setText("Retain Sequences:");

        jLabel3.setText("Ouput Fasta File:");

        jButton1.setText("Clean");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(out, javax.swing.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE)
                            .addComponent(in, javax.swing.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE)
                            .addComponent(ret, javax.swing.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE)))
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(in, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(ret, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(out, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 126, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        String inpath = in.getText();
        File infile = new File(inpath);

        if (!infile.exists()) {
            DialogUtils.displayError(inpath + " does not exist");
            return;
        }

        String retpath = ret.getText();
        File retfile = new File(retpath);

        if (!retfile.exists()) {
            DialogUtils.displayError(retpath + " does not exist");
            return;
        }

        String outpath = out.getText();
        File outfile = new File(outpath);
        boolean error = false;
        try {
            outfile.createNewFile();
        } catch (IOException ex) {
            error = true;
        }

        if (!outfile.exists() || error) {
            DialogUtils.displayError("Could not create " + outpath);
            return;
        }

        Set<String> retainSequences = new HashSet<String>();
        try {
            BufferedReader br = new BufferedReader(new FileReader(retfile));
            String s = "";
                while ((s = br.readLine()) != null) {
                    retainSequences.add(s);
                }
        } catch (Exception ex) {
            DialogUtils.displayError("Error parsing retain file");
            return;
        }

        BufferedInputStream is;
        try {
            is = new BufferedInputStream(new FileInputStream(infile));

            //get the appropriate Alphabet
            Alphabet alpha = AlphabetManager.alphabetForName("DNA");

            //get a SequenceDB of all sequences in the file
            SequenceDB db;
                db = SeqIOTools.readFasta(is, alpha);

            SequenceDB dbcleaned = new HashSequenceDB();

            SequenceIterator it = db.sequenceIterator();
            while (it.hasNext()) {
                Sequence s = it.nextSequence();
                String refname = s.getName();
                if (retainSequences.contains(refname)) {
                    dbcleaned.addSequence(s);
                }
            }

            RichSequence.IOTools.writeFasta(new FileOutputStream(outfile), dbcleaned.sequenceIterator(), null);

            DialogUtils.displayMessage("Successfully cleaned Fasta file");

        } catch (Exception ex) {
            DialogUtils.displayException("Uh oh", "Error encountered in the clean", ex);
            return;
        }

            



    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField in;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField out;
    private javax.swing.JTextField ret;
    // End of variables declaration//GEN-END:variables

}
