/*
 * MappingDialog.java
 *
 * Created on Jan 19, 2011, 5:55:49 PM
 *
 *
 *    Copyright 2011 University of Toronto
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package savant.sql;

import java.awt.CardLayout;
import java.awt.Window;
import java.sql.SQLException;
import java.sql.Types;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.EnumMap;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.SwingWorker;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import savant.api.util.DialogUtils;
import savant.file.DataFormat;
import savant.sql.SQLDataSourcePlugin.Field;
import savant.sql.Table.Column;

/**
 * Dialog which lets user specify the mapping between database columns and our record
 * types.
 *
 * @author tarkvara
 */
public class MappingDialog extends JDialog {
    private static final Log LOG = LogFactory.getLog(MappingDialog.class);

    private SQLDataSourcePlugin plugin;

    /**
     * Display a dialog to let the user set up the field-to-column mappings.
     *
     * @param parent parent dialog
     * @param plugin associated DataSourcePlugin which is being configured.
     * @throws SQLException
     */
    public MappingDialog(Window parent, SQLDataSourcePlugin plugin) throws SQLException {
        super(parent, ModalityType.APPLICATION_MODAL);
        initComponents();
        this.plugin = plugin;
        formatComboActionPerformed(null);   // So that the correct card is displayed.
        populateDatabaseCombo();
        populateTableCombo();
        setLocationRelativeTo(parent);
        plugin.table = null;
        plugin.mappings = null;
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        formatCombo = new javax.swing.JComboBox();
        javax.swing.JLabel formatLabel = new javax.swing.JLabel();
        javax.swing.JLabel databaseLabel = new javax.swing.JLabel();
        databaseCombo = new javax.swing.JComboBox();
        mappingsPanel = new javax.swing.JPanel();
        javax.swing.JPanel bedPanel = new javax.swing.JPanel();
        javax.swing.JLabel chromLabel = new javax.swing.JLabel();
        chromCombo = new javax.swing.JComboBox();
        javax.swing.JLabel startLabel = new javax.swing.JLabel();
        startCombo = new javax.swing.JComboBox();
        javax.swing.JLabel endLabel = new javax.swing.JLabel();
        endCombo = new javax.swing.JComboBox();
        javax.swing.JLabel nameLabel = new javax.swing.JLabel();
        nameCombo = new javax.swing.JComboBox();
        javax.swing.JLabel scoreLabel = new javax.swing.JLabel();
        scoreCombo = new javax.swing.JComboBox();
        javax.swing.JLabel strandLabel = new javax.swing.JLabel();
        strandCombo = new javax.swing.JComboBox();
        javax.swing.JLabel thickStartLabel = new javax.swing.JLabel();
        thickStartCombo = new javax.swing.JComboBox();
        javax.swing.JLabel thickEndLabel = new javax.swing.JLabel();
        thickEndCombo = new javax.swing.JComboBox();
        javax.swing.JLabel blockStarts = new javax.swing.JLabel();
        blockStartsCombo = new javax.swing.JComboBox();
        javax.swing.JLabel blockEndsLabel = new javax.swing.JLabel();
        blockEndsCombo = new javax.swing.JComboBox();
        javax.swing.JPanel continuousPanel = new javax.swing.JPanel();
        javax.swing.JLabel referenceLabel = new javax.swing.JLabel();
        javax.swing.JLabel positionLabel = new javax.swing.JLabel();
        referenceCombo = new javax.swing.JComboBox();
        valueCombo = new javax.swing.JComboBox();
        positionCombo = new javax.swing.JComboBox();
        javax.swing.JLabel valueLabel = new javax.swing.JLabel();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        javax.swing.JLabel tableLabel = new javax.swing.JLabel();
        tableCombo = new javax.swing.JComboBox();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        formatCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "BED", "Generic Continuous" }));
        formatCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formatComboActionPerformed(evt);
            }
        });

        formatLabel.setText("Format");

        databaseLabel.setText("Database");

        databaseCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                databaseComboActionPerformed(evt);
            }
        });

        mappingsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Field Mappings"));
        mappingsPanel.setLayout(new java.awt.CardLayout());

        chromLabel.setText("Chromosome");

        startLabel.setText("Interval Start");

        endLabel.setText("Interval End");

        nameLabel.setText("Name");

        scoreLabel.setText("Score");

        strandLabel.setText("Strand");

        thickStartLabel.setText("Thick Start");

        thickEndLabel.setText("Thick End");

        blockStarts.setText("Block Starts");

        blockEndsLabel.setText("Block Ends");

        javax.swing.GroupLayout bedPanelLayout = new javax.swing.GroupLayout(bedPanel);
        bedPanel.setLayout(bedPanelLayout);
        bedPanelLayout.setHorizontalGroup(
            bedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bedPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chromLabel)
                    .addComponent(startLabel)
                    .addComponent(endLabel)
                    .addComponent(nameLabel)
                    .addComponent(scoreLabel)
                    .addComponent(strandLabel)
                    .addComponent(thickStartLabel)
                    .addComponent(thickEndLabel)
                    .addComponent(blockStarts)
                    .addComponent(blockEndsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(bedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(blockEndsCombo, 0, 270, Short.MAX_VALUE)
                    .addComponent(blockStartsCombo, javax.swing.GroupLayout.Alignment.TRAILING, 0, 270, Short.MAX_VALUE)
                    .addComponent(thickEndCombo, javax.swing.GroupLayout.Alignment.TRAILING, 0, 270, Short.MAX_VALUE)
                    .addComponent(thickStartCombo, javax.swing.GroupLayout.Alignment.TRAILING, 0, 270, Short.MAX_VALUE)
                    .addComponent(strandCombo, javax.swing.GroupLayout.Alignment.TRAILING, 0, 270, Short.MAX_VALUE)
                    .addComponent(scoreCombo, javax.swing.GroupLayout.Alignment.TRAILING, 0, 270, Short.MAX_VALUE)
                    .addComponent(nameCombo, javax.swing.GroupLayout.Alignment.TRAILING, 0, 270, Short.MAX_VALUE)
                    .addComponent(endCombo, javax.swing.GroupLayout.Alignment.TRAILING, 0, 270, Short.MAX_VALUE)
                    .addComponent(startCombo, javax.swing.GroupLayout.Alignment.TRAILING, 0, 270, Short.MAX_VALUE)
                    .addComponent(chromCombo, javax.swing.GroupLayout.Alignment.TRAILING, 0, 270, Short.MAX_VALUE))
                .addContainerGap())
        );
        bedPanelLayout.setVerticalGroup(
            bedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bedPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chromLabel)
                    .addComponent(chromCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(bedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startLabel)
                    .addComponent(startCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(bedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(endLabel)
                    .addComponent(endCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(bedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(nameCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(bedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scoreLabel)
                    .addComponent(scoreCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(bedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(strandLabel)
                    .addComponent(strandCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(bedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(thickStartLabel)
                    .addComponent(thickStartCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(bedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(thickEndLabel)
                    .addComponent(thickEndCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(bedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(blockStarts)
                    .addComponent(blockStartsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(bedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(blockEndsLabel)
                    .addComponent(blockEndsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        mappingsPanel.add(bedPanel, "BED");

        referenceLabel.setText("Reference");

        positionLabel.setText("Position");

        valueLabel.setText("Value");

        javax.swing.GroupLayout continuousPanelLayout = new javax.swing.GroupLayout(continuousPanel);
        continuousPanel.setLayout(continuousPanelLayout);
        continuousPanelLayout.setHorizontalGroup(
            continuousPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(continuousPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(continuousPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(valueLabel)
                    .addComponent(positionLabel)
                    .addComponent(referenceLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(continuousPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(valueCombo, javax.swing.GroupLayout.Alignment.TRAILING, 0, 286, Short.MAX_VALUE)
                    .addComponent(positionCombo, javax.swing.GroupLayout.Alignment.TRAILING, 0, 286, Short.MAX_VALUE)
                    .addComponent(referenceCombo, javax.swing.GroupLayout.Alignment.TRAILING, 0, 286, Short.MAX_VALUE))
                .addContainerGap())
        );
        continuousPanelLayout.setVerticalGroup(
            continuousPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(continuousPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(continuousPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(referenceCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(referenceLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(continuousPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(positionCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(positionLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(continuousPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(valueCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(valueLabel))
                .addContainerGap(269, Short.MAX_VALUE))
        );

        mappingsPanel.add(continuousPanel, "Generic Continuous");

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        tableLabel.setText("Table");

        tableCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tableComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(formatLabel)
                                .addComponent(databaseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(tableLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(tableCombo, 0, 349, Short.MAX_VALUE)
                                .addComponent(databaseCombo, 0, 349, Short.MAX_VALUE)
                                .addComponent(formatCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addContainerGap())
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(mappingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(okButton)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(formatCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(formatLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(databaseCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(databaseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tableCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tableLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mappingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formatComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formatComboActionPerformed
        CardLayout l = (CardLayout)mappingsPanel.getLayout();
        l.show(mappingsPanel, formatCombo.getSelectedItem().toString());
}//GEN-LAST:event_formatComboActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed

        plugin.table = (Table)tableCombo.getSelectedItem();
        plugin.mappings = new EnumMap<Field, Column>(Field.class);
        switch (formatCombo.getSelectedIndex()) {
            case 0: // BED
                plugin.format = DataFormat.INTERVAL_BED;
                plugin.mappings.put(Field.CHROM, (Column)chromCombo.getSelectedItem());
                plugin.mappings.put(Field.START, (Column)startCombo.getSelectedItem());
                plugin.mappings.put(Field.END, (Column)endCombo.getSelectedItem());
                plugin.mappings.put(Field.NAME, (Column)nameCombo.getSelectedItem());
                plugin.mappings.put(Field.SCORE, (Column)scoreCombo.getSelectedItem());
                plugin.mappings.put(Field.STRAND, (Column)strandCombo.getSelectedItem());
                plugin.mappings.put(Field.THICK_START, (Column)thickStartCombo.getSelectedItem());
                plugin.mappings.put(Field.THICK_END, (Column)thickEndCombo.getSelectedItem());
                plugin.mappings.put(Field.BLOCK_STARTS, (Column)blockStartsCombo.getSelectedItem());
                plugin.mappings.put(Field.BLOCK_ENDS, (Column)blockEndsCombo.getSelectedItem());
                break;
            case 1: // Generic Continuous
                plugin.format = DataFormat.CONTINUOUS_GENERIC;
                plugin.mappings.put(Field.CHROM, (Column)referenceCombo.getSelectedItem());
                plugin.mappings.put(Field.POSITION, (Column)positionCombo.getSelectedItem());
                plugin.mappings.put(Field.VALUE, (Column)valueCombo.getSelectedItem());
                break;
        }
        setVisible(false);
    }//GEN-LAST:event_okButtonActionPerformed

    private void databaseComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_databaseComboActionPerformed
        populateTableCombo();
    }//GEN-LAST:event_databaseComboActionPerformed

    /**
     * When the user selects a table from the combo, update the field-combos to reflect
     * the columns in the database.  Since this process can be time-consuming, the
     * actual database access is done in a SwingWorker.
     */
    private void tableComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tableComboActionPerformed
        final Table t = (Table)tableCombo.getSelectedItem();
        LOG.info("tableComboActionPerformed, selectedItem=" + t);
        if (t != null) {
            new SwingWorker() {
                Column[] columns;

                @Override
                public Object doInBackground() {
                    try {
                        columns = t.getColumns();
                    } catch (SQLException sqlx) {
                        LOG.error(sqlx);
                        DialogUtils.displayException("SQL Error", "Unable to get list of columns.", sqlx);
                    }
                    return null;
                }


                @Override
                public void done() {
                    if (columns != null) {
                        Arrays.sort(columns, new Comparator<Column>() {
                            @Override
                            public int compare(Column t, Column t1) {
                                return t.toString().compareTo(t1.toString());
                            }

                        });
                        switch (formatCombo.getSelectedIndex()) {
                            case 0: // BED
                                populateFieldCombo(chromCombo, columns, Types.CHAR);
                                populateFieldCombo(startCombo, columns, Types.INTEGER);
                                populateFieldCombo(endCombo, columns, Types.INTEGER);
                                populateFieldCombo(nameCombo, columns, Types.CHAR);
                                populateFieldCombo(scoreCombo, columns, Types.REAL);
                                populateFieldCombo(strandCombo, columns, Types.CHAR);
                                populateFieldCombo(thickStartCombo, columns, Types.INTEGER);
                                populateFieldCombo(thickEndCombo, columns, Types.INTEGER);
                                populateFieldCombo(blockStartsCombo, columns, Types.BLOB);
                                populateFieldCombo(blockEndsCombo, columns, Types.BLOB);
                                break;
                            case 1: // Generic continuous
                                populateFieldCombo(referenceCombo, columns, Types.CHAR);
                                populateFieldCombo(positionCombo, columns, Types.INTEGER);
                                populateFieldCombo(valueCombo, columns, Types.REAL);
                                break;
                        }
                    }
                }
            }.execute();
        }
    }//GEN-LAST:event_tableComboActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox blockEndsCombo;
    private javax.swing.JComboBox blockStartsCombo;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox chromCombo;
    private javax.swing.JComboBox databaseCombo;
    private javax.swing.JComboBox endCombo;
    private javax.swing.JComboBox formatCombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel mappingsPanel;
    private javax.swing.JComboBox nameCombo;
    private javax.swing.JButton okButton;
    private javax.swing.JComboBox positionCombo;
    private javax.swing.JComboBox referenceCombo;
    private javax.swing.JComboBox scoreCombo;
    private javax.swing.JComboBox startCombo;
    private javax.swing.JComboBox strandCombo;
    private javax.swing.JComboBox tableCombo;
    private javax.swing.JComboBox thickEndCombo;
    private javax.swing.JComboBox thickStartCombo;
    private javax.swing.JComboBox valueCombo;
    // End of variables declaration//GEN-END:variables


    /**
     * Populate the database combo with all databases on the server, excluding
     * system databases which contain no tables.
     */
    private void populateDatabaseCombo() throws SQLException {
        List<Database> databases = plugin.getDatabases();
        for (Database db: databases) {
            List<Table> tables = db.getTables();
            if (tables.size() > 0) {
                databaseCombo.addItem(db);
            }
        }
    }

    /**
     * Get all the tables from the currently-selected database, and put their names into the
     * Table combo.
     */
    private void populateTableCombo() {
        new SwingWorker() {
            List<Table> tables;

            @Override
            public Object doInBackground() {
                try {
                    tables = ((Database)databaseCombo.getSelectedItem()).getTables();
                } catch (SQLException sqlx) {
                    LOG.error(sqlx);
                    DialogUtils.displayException("SQL Error", "Unable to get list of tables.", sqlx);
                }
                return null;
            }

            @Override
            public void done() {
                tableCombo.removeAllItems();
                if (tables != null) {
                    Collections.sort(tables, new Comparator<Table>() {
                        @Override
                        public int compare(Table t, Table t1) {
                            return t.toString().compareTo(t1.toString());
                        }

                    });
                    for (Table t: tables) {
                            tableCombo.addItem(t);
                        }
                    }
                }
        }.execute();
    }

    /**
     * Populate the field combo columns of the appropriate type.
     *
     * @param combo
     * @param columns
     * @param desiredType one of Types.CHAR, Types.INTEGER, Types.REAL, or Types.BLOB to indicate the general type of data desired
     */
    private void populateFieldCombo(JComboBox combo, Column[] columns, int desiredType) {
        combo.removeAllItems();
        for (Column c: columns) {
            switch (c.type) {
                case Types.CHAR:
                case Types.LONGNVARCHAR:
                case Types.NCHAR:
                case Types.NVARCHAR:
                case Types.VARCHAR:
                    if (desiredType == Types.CHAR) {
                        combo.addItem(c);
                    }
                    break;
                case Types.BIGINT:
                case Types.INTEGER:
                case Types.SMALLINT:
                case Types.TINYINT:
                    if (desiredType == Types.INTEGER || desiredType == Types.REAL) {
                        combo.addItem(c);
                    }
                    break;
                case Types.DECIMAL:
                case Types.DOUBLE:
                case Types.FLOAT:
                case Types.NUMERIC:
                case Types.REAL:
                    if (desiredType == Types.REAL) {
                        combo.addItem(c);
                    }
                    break;
                case Types.BINARY:
                case Types.BLOB:
                case Types.LONGVARBINARY:
                case Types.VARBINARY:
                    if (desiredType == Types.BLOB) {
                        combo.addItem(c);
                    }
                    break;
            }
        }
    }
}
