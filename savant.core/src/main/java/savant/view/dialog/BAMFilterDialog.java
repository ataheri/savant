/**
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
package savant.view.dialog;

import java.awt.*;
import javax.swing.JTextField;

import savant.controller.LocationController;
import savant.data.filters.BAMRecordFilter;
import savant.util.MiscUtils;
import savant.util.SAMReadUtils;
import savant.view.tracks.BAMTrack;


/**
 *
 * @author vwilliam
 */
public class BAMFilterDialog extends javax.swing.JDialog {
    private static final int DEFAULT_DISCORDANT_MIN = 50;
    private static final int DEFAULT_DISCORDANT_MAX = 1000;
    private static final int DEFAULT_ARC_YMAX_THRESHOLD = 10000;

    private final BAMTrack track;
    private final BAMRecordFilter filter;
    private JTextField errField = null;

    /**
     * Creates new form BAMFilterDialog
     * @param parent the parent window (usually the Savant main window)
     * @param t the track whose settings and filter are to be adjusted
     */
    public BAMFilterDialog(Window parent, BAMTrack t) {
        super(parent, Dialog.ModalityType.APPLICATION_MODAL);
        initComponents();
        track = t;
        filter = t.getFilter();

        duplicateReadsCheck.setSelected(filter.getIncludeDuplicateReads());
        vendorFailedReadsCheck.setSelected(filter.getIncludeVendorFailedReads());
        pairedCheck.setSelected(filter.getIncludePairedReads());
        unmappedMateCheck.setSelected(filter.getIncludeUnmappedMate());
        unmappedMateCheck.setEnabled(filter.getIncludePairedReads());
        unpairedCheck.setSelected(filter.getIncludeUnpairedReads());
        mappingQualitySlider.setValue(filter.getMappingQualityThreshold());

        double arcThreshold = filter.getArcLengthThreshold();
        if (arcThreshold < 1.0 && arcThreshold > 0.0) {
            arcThresholdField.setText(String.format("%d%%", (int)(arcThreshold * 100.0)));
        } else {
            arcThresholdField.setText(String.valueOf((int)arcThreshold));
        }
        discordantMinField.setText(String.valueOf(t.getConcordantMin()));
        discordantMaxField.setText(String.valueOf(t.getConcordantMax()));
        arcYMaxThresholdField.setText(String.valueOf(t.getMaxBPForYMax()));
        if (t.getPairedProtocol() == SAMReadUtils.PairedSequencingProtocol.PAIREDEND) {
            pairedEndRadio.setSelected(true);
        } else {
            oppositeRadio.setSelected(true);
        }

        getRootPane().setDefaultButton(okButton);
        MiscUtils.registerCancelButton(cancelButton);
        setLocationRelativeTo(parent);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        javax.swing.ButtonGroup strandGroup = new javax.swing.ButtonGroup();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        javax.swing.JPanel jPanel1 = new javax.swing.JPanel();
        duplicateReadsCheck = new javax.swing.JCheckBox();
        vendorFailedReadsCheck = new javax.swing.JCheckBox();
        pairedCheck = new javax.swing.JCheckBox();
        unpairedCheck = new javax.swing.JCheckBox();
        javax.swing.JLabel mappingQualityLabel = new javax.swing.JLabel();
        mappingQualitySlider = new javax.swing.JSlider();
        unmappedMateCheck = new javax.swing.JCheckBox();
        javax.swing.JPanel jPanel2 = new javax.swing.JPanel();
        javax.swing.JLabel arcYMaxThresholdLabel = new javax.swing.JLabel();
        javax.swing.JLabel oppositeIcon = new javax.swing.JLabel();
        javax.swing.JLabel minConcordantLabel = new javax.swing.JLabel();
        oppositeRadio = new javax.swing.JRadioButton();
        javax.swing.JLabel maxConcordantLabel = new javax.swing.JLabel();
        arcYMaxThresholdField = new javax.swing.JTextField();
        javax.swing.JLabel arcThresholdLabel = new javax.swing.JLabel();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        discordantMinField = new javax.swing.JTextField();
        discordantMaxField = new javax.swing.JTextField();
        javax.swing.JLabel pairedEndIcon = new javax.swing.JLabel();
        arcThresholdField = new javax.swing.JTextField();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel4 = new javax.swing.JLabel();
        pairedEndRadio = new javax.swing.JRadioButton();
        javax.swing.JLabel jLabel3 = new javax.swing.JLabel();
        javax.swing.JLabel pairLabel = new javax.swing.JLabel();

        strandGroup.add(pairedEndRadio);
        strandGroup.add(oppositeRadio);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Read Pair Settings");

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("General Filters"));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        duplicateReadsCheck.setSelected(true);
        duplicateReadsCheck.setText("Include duplicate reads");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 5, 0);
        jPanel1.add(duplicateReadsCheck, gridBagConstraints);

        vendorFailedReadsCheck.setSelected(true);
        vendorFailedReadsCheck.setText("Include vendor failed reads");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 0);
        jPanel1.add(vendorFailedReadsCheck, gridBagConstraints);

        pairedCheck.setSelected(true);
        pairedCheck.setText("Include paired reads");
        pairedCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pairedCheckActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 0);
        jPanel1.add(pairedCheck, gridBagConstraints);

        unpairedCheck.setSelected(true);
        unpairedCheck.setText("Include unpaired reads");
        unpairedCheck.setActionCommand("Include unpaired reads");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 0);
        jPanel1.add(unpairedCheck, gridBagConstraints);

        mappingQualityLabel.setText("Mapping quality threshold");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 10, 5);
        jPanel1.add(mappingQualityLabel, gridBagConstraints);

        mappingQualitySlider.setMajorTickSpacing(50);
        mappingQualitySlider.setMaximum(255);
        mappingQualitySlider.setPaintLabels(true);
        mappingQualitySlider.setValue(0);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.ipadx = 322;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 10, 10);
        jPanel1.add(mappingQualitySlider, gridBagConstraints);

        unmappedMateCheck.setSelected(true);
        unmappedMateCheck.setText("Include reads with unmapped mates");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 30, 5, 0);
        jPanel1.add(unmappedMateCheck, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Arc Mode Settings"));

        arcYMaxThresholdLabel.setText("Don't adjust ymax for arcs larger than:");

        oppositeIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/savant/images/reads_opposite.png"))); // NOI18N

        minConcordantLabel.setText("Min concordant insert size:");

        oppositeRadio.setSelected(true);
        oppositeRadio.setText("opposite strands");

        maxConcordantLabel.setText("Max concordant insert size:");

        arcThresholdLabel.setText("Ignore sizes smaller than:");

        jLabel2.setText("bp");

        pairedEndIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/savant/images/reads_same.png"))); // NOI18N

        arcThresholdField.setToolTipText("Either enter an absolute number of base pairs, or a percentage of ymax");

        jLabel1.setText("bp");

        jLabel4.setText("bp");

        pairedEndRadio.setText("same strand");

        jLabel3.setText("bp or %");

        pairLabel.setText("Pairs are sequenced from:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pairLabel)
                    .addComponent(minConcordantLabel)
                    .addComponent(maxConcordantLabel)
                    .addComponent(arcYMaxThresholdLabel)
                    .addComponent(arcThresholdLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(oppositeRadio)
                            .addComponent(pairedEndRadio))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pairedEndIcon)
                            .addComponent(oppositeIcon)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(arcYMaxThresholdField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(arcThresholdField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(discordantMaxField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(discordantMinField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4))))
                .addContainerGap(48, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(oppositeIcon)
                            .addComponent(oppositeRadio))
                        .addGap(5, 5, 5)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(pairedEndIcon)
                            .addComponent(pairedEndRadio))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(discordantMinField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(minConcordantLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(discordantMaxField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(maxConcordantLabel)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(arcThresholdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(arcThresholdLabel)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(arcYMaxThresholdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(arcYMaxThresholdLabel)
                            .addComponent(jLabel4)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(pairLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(okButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 601, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(cancelButton))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        setVisible(false);
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        try {
            SAMReadUtils.PairedSequencingProtocol prot = parseProtocol();
            int discordantMin = parseField(discordantMinField, DEFAULT_DISCORDANT_MIN);
            int discordantMax = parseField(discordantMaxField, DEFAULT_DISCORDANT_MAX);
            double arcThreshold = parseArcThreshold();
            int maxBPForYMax = parseField(arcYMaxThresholdField, DEFAULT_ARC_YMAX_THRESHOLD);

            // Everything parsed okay, so update the filter and track properties.
            filter.setArcLengthThreshold(arcThreshold);
            filter.setIncludeDuplicateReads(duplicateReadsCheck.isSelected());
            filter.setIncludeVendorFailedReads(vendorFailedReadsCheck.isSelected());
            filter.setIncludePairedReads(pairedCheck.isSelected());
            filter.setIncludeUnmappedMate(filter.getIncludePairedReads() && unmappedMateCheck.isSelected());
            filter.setIncludeUnpairedReads(unpairedCheck.isSelected());
            filter.setMappingQualityThreshold(mappingQualitySlider.getValue());
            track.setPairedProtocol(prot);
            track.setConcordantMin(discordantMin);
            track.setConcordantMax(discordantMax);
            track.setMaxBPForYMax(maxBPForYMax);
            setVisible(false);
            track.prepareForRendering(LocationController.getInstance().getReferenceName() , LocationController.getInstance().getRange());
            track.repaint();
        } catch (NumberFormatException e) {
            Toolkit.getDefaultToolkit().beep();
            errField.setText("");
            errField.grabFocus();
        }
    }//GEN-LAST:event_okButtonActionPerformed

    private void pairedCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pairedCheckActionPerformed
        unmappedMateCheck.setEnabled(pairedCheck.isSelected());
    }//GEN-LAST:event_pairedCheckActionPerformed

    private SAMReadUtils.PairedSequencingProtocol parseProtocol() {
        return pairedEndRadio.isSelected() ? SAMReadUtils.PairedSequencingProtocol.PAIREDEND : SAMReadUtils.PairedSequencingProtocol.MATEPAIR;
    }

    private int parseField(JTextField f, int dflt) throws NumberFormatException {
        errField = f;
        String str = f.getText();
        return str.equals("") ? dflt : Integer.parseInt(str);
    }

    /**
     * Parsing the arc threshold is more complicated, because it can be either an absolute number or a percentage.
     */
    private double parseArcThreshold() {
        errField = arcThresholdField;
        double result;
        String threshStr = arcThresholdField.getText();
        if (threshStr.equals("")) {
            result = BAMRecordFilter.DEFAULT_ARC_LENGTH_THRESHOLD;
        } else {
            if (threshStr.endsWith("%")) {
                // It's a percentage value.  Note that if they type in a percentage greater than 100, it
                // will be misinterpreted as an absolute number of bps.
                result = Double.parseDouble(threshStr.substring(0, threshStr.length() - 1)) * 0.01;
                if (result >= 1.0) {
                    throw new NumberFormatException();
                }
            } else {
                result = Double.parseDouble(threshStr);
            }
        }
        return result;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField arcThresholdField;
    private javax.swing.JTextField arcYMaxThresholdField;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField discordantMaxField;
    private javax.swing.JTextField discordantMinField;
    private javax.swing.JCheckBox duplicateReadsCheck;
    private javax.swing.JSlider mappingQualitySlider;
    private javax.swing.JButton okButton;
    private javax.swing.JRadioButton oppositeRadio;
    private javax.swing.JCheckBox pairedCheck;
    private javax.swing.JRadioButton pairedEndRadio;
    private javax.swing.JCheckBox unmappedMateCheck;
    private javax.swing.JCheckBox unpairedCheck;
    private javax.swing.JCheckBox vendorFailedReadsCheck;
    // End of variables declaration//GEN-END:variables
}
