/*
 *    Copyright 2011 University of Toronto
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package savant.ucsc;

import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.Window;
import java.sql.SQLException;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JDialog;

import savant.api.util.DialogUtils;
import savant.api.util.SettingsUtils;
import savant.sql.*;
import savant.sql.MappingDialog.FormatDef;


/**
 * UCSC-specific dialog for selecting the desired table.
 *
 * @author tarkvara
 */
public class UCSCNavigationDialog extends JDialog implements SQLConstants {

    private MappingPanel mappingPanel;
    private ColumnMapping knownMapping;

    private UCSCDataSourcePlugin plugin = null;

    /**
     * Dialog which lets the user navigate through the UCSC hierarchy and select
     * the table they want.
     *
     * @param parent cannot be null
     */
    public UCSCNavigationDialog(Window parent, UCSCDataSourcePlugin plug) throws SQLException {
        super(parent, ModalityType.APPLICATION_MODAL);
        this.plugin = plug;
        initComponents();

        mappingPanel = new MappingPanel();
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridwidth = GridBagConstraints.REMAINDER;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(8, 8, 8, 8);
        add(mappingPanel, gbc);

        formatCombo.setModel(MappingDialog.FORMAT_COMBO_MODEL);
        populateCladeCombo();
        pack();
        setLocationRelativeTo(parent);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        javax.swing.JPanel navigationPanel = new javax.swing.JPanel();
        javax.swing.JLabel cladeLabel = new javax.swing.JLabel();
        cladeCombo = new javax.swing.JComboBox();
        javax.swing.JLabel genomeLabel = new javax.swing.JLabel();
        genomeCombo = new javax.swing.JComboBox();
        javax.swing.JLabel groupLabel = new javax.swing.JLabel();
        groupCombo = new javax.swing.JComboBox();
        javax.swing.JLabel trackLabel = new javax.swing.JLabel();
        trackCombo = new javax.swing.JComboBox();
        javax.swing.JLabel formatLabelLabel = new javax.swing.JLabel();
        formatLabel = new javax.swing.JLabel();
        formatCombo = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("UCSC Genome Database");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        getContentPane().add(okButton, gridBagConstraints);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        getContentPane().add(cancelButton, gridBagConstraints);

        navigationPanel.setLayout(new java.awt.GridBagLayout());

        cladeLabel.setText("Clade:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        navigationPanel.add(cladeLabel, gridBagConstraints);

        cladeCombo.setMaximumSize(new java.awt.Dimension(300, 32767));
        cladeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cladeComboActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        navigationPanel.add(cladeCombo, gridBagConstraints);

        genomeLabel.setText("Genome:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        navigationPanel.add(genomeLabel, gridBagConstraints);

        genomeCombo.setMaximumSize(new java.awt.Dimension(300, 32767));
        genomeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genomeComboActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        navigationPanel.add(genomeCombo, gridBagConstraints);

        groupLabel.setText("Group:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        navigationPanel.add(groupLabel, gridBagConstraints);

        groupCombo.setMaximumRowCount(9);
        groupCombo.setMaximumSize(new java.awt.Dimension(300, 32767));
        groupCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                groupComboActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        navigationPanel.add(groupCombo, gridBagConstraints);

        trackLabel.setText("Track:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        navigationPanel.add(trackLabel, gridBagConstraints);

        trackCombo.setMaximumSize(new java.awt.Dimension(300, 32767));
        trackCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trackComboActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        navigationPanel.add(trackCombo, gridBagConstraints);

        formatLabelLabel.setText("Format:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        navigationPanel.add(formatLabelLabel, gridBagConstraints);

        formatLabel.setText("BED");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        navigationPanel.add(formatLabel, gridBagConstraints);

        formatCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formatComboActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        navigationPanel.add(formatCombo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        getContentPane().add(navigationPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        ColumnMapping mapping = mappingPanel.getMapping();
        mapping.save(plugin);
        setVisible(false);
}//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        plugin.closeGenomeConnection();
        setVisible(false);
}//GEN-LAST:event_cancelButtonActionPerformed

    private void cladeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cladeComboActionPerformed
        populateGenomeCombo();
    }//GEN-LAST:event_cladeComboActionPerformed

    private void genomeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genomeComboActionPerformed
        populateGroupCombo();
    }//GEN-LAST:event_genomeComboActionPerformed

    private void groupComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_groupComboActionPerformed
        populateTrackCombo();
    }//GEN-LAST:event_groupComboActionPerformed

    private void trackComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trackComboActionPerformed
        TrackDef track = (TrackDef)trackCombo.getSelectedItem();
        knownMapping = plugin.selectTrack(track);
        formatLabel.setText(track.type);
        if (knownMapping != null) {
            switch (knownMapping.format) {
                case INTERVAL_RICH:
                    formatCombo.setSelectedIndex(0);
                    break;
                case INTERVAL_GENERIC:
                    formatCombo.setSelectedIndex(1);
                    break;
                case CONTINUOUS_VALUE_COLUMN:
                    formatCombo.setSelectedIndex(2);
                    break;
                case CONTINUOUS_WIG:
                    formatCombo.setSelectedIndex(3);
                    break;
            }
        }
    }//GEN-LAST:event_trackComboActionPerformed

    private void formatComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formatComboActionPerformed
        mappingPanel.setFormat(((FormatDef)formatCombo.getSelectedItem()).format);
        try {
            TrackDef trackDef = (TrackDef)trackCombo.getSelectedItem();
            mappingPanel.populate(plugin.table.getColumns(), knownMapping, !plugin.table.getName().equals(trackDef.track) && !plugin.table.getName().equals("all_" + trackDef.track));
        } catch (SQLException sqlx) {
            DialogUtils.displayException("SQL Error", "Unable to get list of columns.", sqlx);
        }
    }//GEN-LAST:event_formatComboActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox cladeCombo;
    private javax.swing.JComboBox formatCombo;
    private javax.swing.JLabel formatLabel;
    private javax.swing.JComboBox genomeCombo;
    private javax.swing.JComboBox groupCombo;
    private javax.swing.JButton okButton;
    private javax.swing.JComboBox trackCombo;
    // End of variables declaration//GEN-END:variables

    private void populateCladeCombo() throws SQLException {
        new CladesFetcher(plugin) {
            @Override
            public void done(String selectedClade) {
                cladeCombo.setModel(new DefaultComboBoxModel(UCSCDataSourcePlugin.STANDARD_CLADES));
                if (selectedClade != null) {
                    cladeCombo.setSelectedItem(selectedClade);
                } else {
                    cladeCombo.setSelectedIndex(0);
                }
            }
        }.execute();
    }

    private void populateGenomeCombo() {
        String clade = (String)cladeCombo.getSelectedItem();
        genomeCombo.setModel(new DefaultComboBoxModel(plugin.getCladeGenomes(clade)));
        genomeCombo.setSelectedItem(plugin.getCurrentGenome(clade));
    }

    private void populateGroupCombo() {
        new GroupsFetcher(plugin, (GenomeDef)genomeCombo.getSelectedItem()) {
            @Override
            public void done(List<GroupDef> groups) {
                if (groups != null) {
                    groupCombo.setModel(new DefaultComboBoxModel(groups.toArray()));
                    groupCombo.setSelectedIndex(0);
                }
            }
        }.execute();
    }

    private void populateTrackCombo() {
        GroupDef group = (GroupDef)groupCombo.getSelectedItem();
        trackCombo.setModel(new DefaultComboBoxModel(group.tracks.toArray()));
        trackCombo.setSelectedIndex(0);
    }

    public MappedTable getMapping() {
        if (plugin.table != null) {
            SettingsUtils.setString(plugin, "GENOME", plugin.genomeDB.getName());
            return new MappedTable(plugin.table, mappingPanel.getMapping(), ((TrackDef)trackCombo.getSelectedItem()).track);
        }
        return null;
    }
}
