/*
 *    Copyright 2011 University of Toronto
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package savant.view.swing.start;

import java.awt.*;
import java.awt.event.*;
import java.awt.font.TextAttribute;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.text.BreakIterator;
import java.util.List;
import javax.swing.*;
import javax.swing.text.*;
import java.util.HashMap;
import java.util.Map;

import com.jidesoft.swing.AutoResizingTextArea;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;

import savant.api.util.DialogUtils;
import savant.controller.ProjectController;
import savant.controller.RecentProjectsController;
import savant.settings.BrowserSettings;
import savant.settings.DirectorySettings;
import savant.settings.PersistentSettings;
import savant.util.NetworkUtils;
import savant.util.swing.HyperlinkButton;


/**
 * Panel which displays news, recent tracks, and recent projects.
 *
 * @author mfiume
 */
public class StartPanel extends JPanel {
    private static final Log LOG = LogFactory.getLog(StartPanel.class);

    private static final Font TITLE_FONT = new Font("Arial", Font.BOLD, 16);
    private static final Font DATE_FONT = new Font("Arial", Font.ITALIC, 12);

    private static final int VERT_SEP = 10;
    private static final int HOR_SEP = 10;
    private static final int HEADER_OFFSET = 30;
    private static final double VERT_MARGIN_PERCENT = 0.1;
    private static final double HOR_MARGIN_PERCENT = 0.05;


    private static final Color BACKGROUND_COLOR = Color.DARK_GRAY;
    private static final Color TEXT_COLOR = new Color(240, 240, 240);
    static Color SUBPANEL_TOP_BACKGROUND_COLOR = new Color(50, 50, 50);
    static Color SUBPANEL_BOTTOM_BACKGROUND_COLOR = new Color(10, 10, 10);
    static Color SUBPANEL_OUTLINE_COLOR = new Color(10, 10, 10);

    private StartSubPanel recentProjectsPanel;
    private StartSubPanel helpPanel;
    private StartSubPanel newsPanel;
    private JCheckBox dontShowStartPageButton;

    /** Creates new form StartPage */
    public StartPanel() {

        initComponents();
        init();
        configureSizes();

        addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                configureSizes();
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 787, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 555, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void init() {
        this.setBackground(BACKGROUND_COLOR);
        this.setOpaque(false);

        recentProjectsPanel = new StartSubPanel("Recent Projects", getRecentProjectsInnerPanel());
        newsPanel = new StartSubPanel("Latest News", getNewsInnerPanel());
        helpPanel = new StartSubPanel("Become a Genome Savant", getHelpPanel());

        add(recentProjectsPanel);
//        add(helpPanel);   Currently disabled.
        add(newsPanel);

        dontShowStartPageButton = new JCheckBox("Don't show Start Page");
        dontShowStartPageButton.setOpaque(false);
        dontShowStartPageButton.setForeground(TEXT_COLOR);
        dontShowStartPageButton.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                BrowserSettings.setShowStartPage(!dontShowStartPageButton.isSelected());
                try {
                    PersistentSettings.getInstance().store();
                } catch (IOException ex) {
                    LOG.error(ex);
                }
            }
            
        });
        this.add(dontShowStartPageButton);
    }
    int buffer = 10;

    @Override
    public void paintComponent(Graphics g) {
        
        ((Graphics2D)g).setRenderingHint(RenderingHints.KEY_ANTIALIASING, // Anti-alias!
        RenderingHints.VALUE_ANTIALIAS_ON);

        g.setColor(BACKGROUND_COLOR);
        g.fillRect(0, 0, this.getWidth(), this.getHeight());
        //centerImage(g, logo.getImage(), new Point(this.getWidth()/2, 50));

        //centerImage(g, logo.getImage()/*scaleImage(logo.getImage(),0.7)*/, new Point(this.getWidth()/2, this.getHeight()/2));

        int totalwidth = this.getWidth();
        int totalheight = this.getHeight();

        int topoffset = (int) (totalheight * VERT_MARGIN_PERCENT);

        g.setFont(new Font("Tahoma", Font.BOLD, 60));
        FontMetrics fm = g.getFontMetrics();
        String bannerstr = "Savant Genome Browser";
        int bannershift = fm.stringWidth(bannerstr)/2;

        int stringX = totalwidth/2 + - bannershift;
        int stringY = topoffset+HEADER_OFFSET- 20;
        g.setColor(TEXT_COLOR);
        g.drawString(bannerstr, stringX, stringY);
    }

    public static void main(String[] argv) {
        JFrame f = new JFrame();
        f.setBackground(Color.darkGray);
        f.add(new StartPanel());
        f.setVisible(true);
    }

    private void centerImage(Graphics g, Image img, Point center) {
        int x = (int) center.getX() - img.getWidth(this) / 2;
        int y = (int) center.getY() - img.getHeight(this) / 2;
        g.drawImage(img, x, y, this);
    }

    private Image scaleImage(Image image, double d) {
        LOG.debug("Width: " + image.getWidth(null) + " scaled width: " + ((int) (image.getHeight(null) * d)));
        return image.getScaledInstance((int) (image.getWidth(null) * d), (int) (image.getHeight(null) * d), Image.SCALE_SMOOTH);
    }
    
    private void configureSizes() {
        int totalWidth = getWidth();
        int totalHeight = getHeight();

        int horMargin = (int)(totalWidth * HOR_MARGIN_PERCENT);
        int vertMargin = (int)(totalHeight * VERT_MARGIN_PERCENT);

        int unitHeight = (int) (totalHeight - (2 * vertMargin) - VERT_SEP) / 2;
        int unitWidth = (int) (totalWidth - (2 * horMargin) - HOR_SEP) / 2;

        Dimension unitDim = new Dimension(unitWidth, unitHeight);
        Dimension bigUnitDim = new Dimension(unitWidth, unitHeight * 2 + VERT_SEP);

        placeComponent(recentProjectsPanel, new Point(horMargin, HEADER_OFFSET + vertMargin), bigUnitDim);
//        placeComponent(helpPanel, new Point(horMargin, HEADER_OFFSET + totalHeight - vertMargin - unitHeight), unitDim);
        placeComponent(newsPanel, new Point(horMargin + unitWidth + HOR_SEP, HEADER_OFFSET + vertMargin), bigUnitDim);
        placeComponent(dontShowStartPageButton, new Point(totalWidth-(int) dontShowStartPageButton.getWidth()-5,totalHeight-(int) dontShowStartPageButton.getHeight()-5), dontShowStartPageButton.getPreferredSize() );
    }

    private void placeComponent(JComponent c, Point p, Dimension dim) {
        c.setBounds(p.x, p.y, dim.width, dim.height);
        c.revalidate();
    }

    private JPanel getRecentProjectsInnerPanel() {

        JPanel pan = new JPanel();
        pan.setOpaque(false);
        pan.setLayout(new BoxLayout(pan, BoxLayout.Y_AXIS));

        try {
            List<String> projects = RecentProjectsController.getInstance().getRecentProjects();
            for (final String t : projects) {

                pan.add(HyperlinkButton.createHyperlinkButton(t, StartPanel.TEXT_COLOR, new ActionListener() {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        try {
                            ProjectController.getInstance().loadProjectFromFile(new File(t));
                        } catch (Exception x) {
                            DialogUtils.displayException("Project Error", String.format("<html>Unable to load project <i>%s</i>: %s.</html>", t, x), x);
                        }
                    }
                }));
            }

            if (projects.isEmpty()) {
                pan.add(createLabel("No recent projects"));
            }
        } catch (IOException ex) {
        }

        return pan;
    }

    private JTextArea createTextArea(String lab) {
        JTextArea l = new JTextArea();
        l.setText(lab);
        l.setHighlighter(null);
        l.setLineWrap(true);
        l.setWrapStyleWord(true);
        l.setEditable(false);
        l.setForeground(StartPanel.TEXT_COLOR);
        l.setOpaque(false);
        return l;
    }

    private JLabel createLabel(String lab) {
        JLabel l = new JLabel(lab);
        l.setOpaque(false);
        l.setForeground(StartPanel.TEXT_COLOR);
        l.setAlignmentX(Component.LEFT_ALIGNMENT);

        //l.setFont(new Font("Arial", Font.PLAIN, 12));
        return l;
    }

    private JComponent getNewsInnerPanel() {

        JPanel p = new JPanel();
        p.setBackground(Color.red);
        p.setOpaque(false);

        try {
            File newsFile = NetworkUtils.downloadFile(BrowserSettings.NEWS_URL, DirectorySettings.getTmpDirectory(), null);
            p = parseNewsFile(newsFile);
            if (newsFile.exists()) { newsFile.delete(); }

        } catch (Exception ex) {
            p.add(this.createLabel("Problem getting news"));
        }

        return p;

    }

    private JPanel parseNewsFile(File newsFile) {
        JPanel p = null;

        try {

            p = new JPanel();
            p.setOpaque(false);
            //p.setBackground(Color.red);
            BoxLayout bl = new BoxLayout(p,BoxLayout.Y_AXIS);
            p.setLayout(bl);

            Document d = new SAXBuilder().build(newsFile);
            Element root = d.getRootElement();

            List<Element> newsEntries = root.getChildren("entry");

            Map<TextAttribute, Object> underlining = new HashMap<TextAttribute, Object>();
            underlining.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_LOW_ONE_PIXEL);
            Font underlined = getFont().deriveFont(underlining);

            for (Element e : newsEntries) {

                final String text = e.getChildText("description");

                AutoResizingTextArea ta = new AutoResizingTextArea(text);
                ta.setMaximumSize(new Dimension(99999,1));
                ta.setForeground(StartPanel.TEXT_COLOR);
                ta.setLineWrap(true);
                ta.setHighlighter(new BlankHighlighter());
                ta.addMouseListener(new MouseListener() {

                    @Override
                    public void mouseClicked(MouseEvent e) {
                        e.consume();
                    }

                    @Override
                    public void mousePressed(MouseEvent e) {
                        e.consume();
                    }

                    @Override
                    public void mouseReleased(MouseEvent e) {
                        e.consume();
                    }

                    @Override
                    public void mouseEntered(MouseEvent e) {
                        e.consume();
                    }

                    @Override
                    public void mouseExited(MouseEvent e) {
                        e.consume();
                    }

                });
                ta.setOpaque(false);
                ta.setWrapStyleWord(true);
                ta.setEditable(false);

                JLabel title = new JLabel(e.getChildText("title"));
                title.setFont(TITLE_FONT);
                title.setForeground(StartPanel.TEXT_COLOR);

                JLabel date = new JLabel(e.getChildText("date"));
                date.setFont(DATE_FONT);
                date.setForeground(TEXT_COLOR);

                p.add(Box.createVerticalStrut(10));

                title.setAlignmentX(Component.LEFT_ALIGNMENT);
                p.add(title);
                date.setAlignmentX(Component.LEFT_ALIGNMENT);
                p.add(date);
                ta.setAlignmentX(Component.LEFT_ALIGNMENT);
                p.add(ta);

                final String more = e.getChildText("more");
                if (more != null && more.length() > 0) {
                    JLabel link = new JLabel("More...");
                    link.setForeground(TEXT_COLOR);
                    link.setFont(underlined);
                    link.addMouseListener(new MouseAdapter() {
                        @Override
                        public void mouseClicked(MouseEvent e) {
                            try {
                                Desktop.getDesktop().browse(URI.create(more));
                            } catch (Exception x) {
                                LOG.info(x);
                            }
                        }
                    });
                    p.add(link);
                }
            }

            p.add(Box.createVerticalGlue());

        } catch (Exception e) {
            JLabel l = new JLabel("Problem getting news");
            l.setForeground(StartPanel.TEXT_COLOR);
            p.add(l);
        }

        return p;
    }

    public JTextArea createTextAreaFitToText(String message, Dimension minimalSize) {

        JTextArea aMessagePanel = new JTextArea();
        aMessagePanel.setText(message);

        /*for modelToView to work, the text area has to be sized. It doesn't matter if it's visible or not.*/
        aMessagePanel.setPreferredSize(minimalSize);
        aMessagePanel.setSize(minimalSize);

        Rectangle r;
        try {
            r = aMessagePanel.modelToView(aMessagePanel.getDocument().getLength());
            Dimension d = new Dimension(minimalSize.width, r.y + r.height);
            aMessagePanel.setPreferredSize(d);
        } catch (BadLocationException ex) {
        }

        return aMessagePanel;

    }

    private void p(StyledDocument doc, String text) throws BadLocationException {
        doc.insertString(doc.getLength(), text, getParagraphAttributes());
    }

    public static SimpleAttributeSet getParagraphAttributes() {
        SimpleAttributeSet att = new SimpleAttributeSet();
        StyleConstants.setFontSize(att, 12);
        return att;
    }

    private void wrapLabelText(JLabel label, String text) {

        LOG.debug("Wrapping text: " + text);

        FontMetrics fm = label.getFontMetrics(label.getFont());
        Container container = label.getParent();
        int containerWidth = container.getWidth();

        LOG.debug("Container width: " + containerWidth);

        BreakIterator boundary = BreakIterator.getWordInstance();
        boundary.setText(text);

        StringBuffer trial = new StringBuffer();
        StringBuilder real = new StringBuilder("<html>");

        int start = boundary.first();
        for (int end = boundary.next(); end != BreakIterator.DONE;
                start = end, end = boundary.next()) {
            String word = text.substring(start, end);
            LOG.debug(word);

            trial.append(word);
            int trialWidth = SwingUtilities.computeStringWidth(fm,
                    trial.toString());
            if (trialWidth > containerWidth) {
                trial = new StringBuffer(word);
                real.append("<br>");
            }
            real.append(word);
        }

        real.append("</html>");

        label.setText(real.toString());
        LOG.debug("Done wrapping text: " + real.toString());


    }

    private JComponent getHelpPanel() {
        JPanel pan = new JPanel();
        pan.setOpaque(false);
        pan.setLayout(new BoxLayout(pan, BoxLayout.Y_AXIS));

        pan.add(HyperlinkButton.createHyperlinkButton("Video Tutorials", StartPanel.TEXT_COLOR, new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    Desktop.getDesktop().browse(BrowserSettings.DOCUMENTATION_URL.toURI());
                } catch (Exception ex) {
                    DialogUtils.displayError("Uh oh", "Could not open browser");
                }
            }
        }));

        pan.add(HyperlinkButton.createHyperlinkButton("Useful Shortcuts", StartPanel.TEXT_COLOR, new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    Desktop.getDesktop().browse(BrowserSettings.SHORTCUTS_URL.toURI());
                } catch (Exception ex) {
                    DialogUtils.displayError("Uh oh", "Could not open browser");
                }
            }
        }));


        return pan;
    }


    class BlankHighlighter extends DefaultHighlighter {

        private boolean enabled = false;

        public void enableHighlighting(boolean enable) {
            this.enabled = enable;
        }

        @Override
        public Object addHighlight(int p0, int p1, Highlighter.HighlightPainter p) throws BadLocationException {
            return enabled ? super.addHighlight(p0, p1, p) : null;
        }
    };

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
