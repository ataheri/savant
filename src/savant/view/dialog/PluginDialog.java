/*
 * PluginManager.java
 *
 * Created on Mar 9, 2010, 10:11:36 AM
 */

package savant.view.dialog;

import savant.view.dialog.tree.PluginRepositoryBrowser;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jdom.JDOMException;
import savant.view.swing.*;
import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FilenameFilter;
import java.io.IOException;
import java.net.URL;
import savant.settings.BrowserSettings;
import savant.util.DownloadFile;

/**
 *
 * @author mfiume
 */
public class PluginDialog extends javax.swing.JDialog {

    private static Log log = LogFactory.getLog(PluginDialog.class);
    public static String pluginDir = "plugins";

    /** Creates new form PluginManager */
    public PluginDialog(java.awt.Frame parent) {
        super(parent,"Plugin Manager");
        initComponents();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.setLocationRelativeTo(parent);
        this.setResizable(false);
        updatePluginList();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        list_installedplugins = new javax.swing.JList(new DefaultListModel());
        button_remove = new javax.swing.JButton();
        button_add_from_file = new javax.swing.JButton();
        button_add_from_url = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconImage(null);
        setIconImages(null);

        jLabel1.setText("Installed Plugins");

        list_installedplugins.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(list_installedplugins);

        button_remove.setText("Uninstall");
        button_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_removeActionPerformed(evt);
            }
        });

        button_add_from_file.setText("Install from file");
        button_add_from_file.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_add_from_fileActionPerformed(evt);
            }
        });

        button_add_from_url.setText("Install from server");
        button_add_from_url.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_add_from_urlActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(button_add_from_url)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(button_add_from_file)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(button_remove))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_remove)
                    .addComponent(button_add_from_file)
                    .addComponent(button_add_from_url))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_add_from_fileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_add_from_fileActionPerformed
        addPlugin();
    }//GEN-LAST:event_button_add_from_fileActionPerformed

    private void button_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_removeActionPerformed
        removePlugin();
    }//GEN-LAST:event_button_removeActionPerformed

    private void button_add_from_urlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_add_from_urlActionPerformed
        try {
            File file = DownloadFile.downloadFile(new URL(BrowserSettings.url_plugin), System.getProperty("java.io.tmpdir"));
            if (file == null) {
                JOptionPane.showMessageDialog(this, "Problem downloading file: " + BrowserSettings.url_plugin);
                return;
            }
            PluginRepositoryBrowser d = new PluginRepositoryBrowser(Savant.getInstance(), true, "Download Plugins", file, pluginDir);
            d.setVisible(true);
            this.updatePluginList();
            //addPluginFromURL();
        } catch (JDOMException ex) {
            JOptionPane.showMessageDialog(this, "Problem downloading file: " + BrowserSettings.url_plugin);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Problem downloading file: " + BrowserSettings.url_plugin);
        }
    }//GEN-LAST:event_button_add_from_urlActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_add_from_file;
    private javax.swing.JButton button_add_from_url;
    private javax.swing.JButton button_remove;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList list_installedplugins;
    // End of variables declaration//GEN-END:variables

    private void updatePluginList() {
        log.info("Updating plugin list");
        
        DefaultListModel model = (DefaultListModel) this.list_installedplugins.getModel();
        model.removeAllElements();

        File dir = new File(pluginDir);

        // It is also possible to filter the list of returned files.
        // This example does not return any files that start with `.'.
        FilenameFilter filter = new FilenameFilter() {
            @Override
            public boolean accept(File dir, String name) {
                return name.endsWith(".jar");
            }
        };
        String[] children  = dir.list(filter);

        if (children == null) {
            // Either dir does not exist or is not a directory
        } else {
            for (int i=0; i<children.length; i++) {
                // Get filename of file or directory
                 model.add(i, children[i]);
            }
        }
    }

    private void addPlugin() {

        // create a frame and place the dialog in it
        JFrame jf = new JFrame();
        String selectedFileName;
        if (Savant.mac) {
            FileDialog fd = new FileDialog(jf, "Add Plugin", FileDialog.LOAD);
            fd.setVisible(true);
            jf.setAlwaysOnTop(true);
            // get the path (null if none selected)
            selectedFileName = fd.getFile();
            if (selectedFileName != null) {
                selectedFileName = fd.getDirectory() + selectedFileName;
            }
        }
        else {
            JFileChooser fd = new JFileChooser();
            fd.setDialogTitle("Add Plugin");
            fd.setDialogType(JFileChooser.OPEN_DIALOG);
            int result = fd.showOpenDialog(this);
            if (result == JFileChooser.CANCEL_OPTION || result == JFileChooser.ERROR_OPTION ) return;
            selectedFileName = fd.getSelectedFile().getPath();
        }

        // copy the plugin
        if (selectedFileName != null) {
            try {
                int lastSlashIndex = selectedFileName.lastIndexOf(System.getProperty("file.separator"));
                String name = selectedFileName.substring(lastSlashIndex + 1, selectedFileName.length());

                copyFile(new File(selectedFileName), new File(pluginDir + System.getProperty("file.separator") + name));

                updatePluginList();

            // error copying file
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error installing plugin." +
                        "\nYou can manually install it by adding the appropriate \n" +
                        ".jar file to the plugins directory.");
            }

            JOptionPane.showMessageDialog(this, "Plugin successfully installed. Restart Savant \n" +
                    "for changes to take effect.");
        }
    }

    private void removePlugin() {

        int reply = JOptionPane.showConfirmDialog(this, "Are you sure you want to remove \n" +
                "this plugin?", "Remove Plugin?", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            try {
                String pluginFileName = (String) this.list_installedplugins.getSelectedValue();

                if (pluginFileName.equals("SavantCore.jar") || pluginFileName.equals("SavantData.jar")) {
                    JOptionPane.showMessageDialog(this, "This plugin provides core functionality and \n" +
                            "cannot be uninstalled.");
                    return;
                }

                DefaultListModel model = (DefaultListModel) this.list_installedplugins.getModel();

                log.info("Trying to uninstall " + pluginDir + System.getProperty("file.separator") + pluginFileName);

                File f = new File(pluginDir + System.getProperty("file.separator") + pluginFileName);

                boolean success = f.delete();

                if (success) {
                    model.removeElement(pluginFileName);
                    updatePluginList();
                    JOptionPane.showMessageDialog(this, "Plugin successfully uninstalled. Restart Savant \n" +
                     "for changes to take effect.");
                } else {
                    f.deleteOnExit();
                    model.removeElement(pluginFileName);
                    updatePluginList();
                    JOptionPane.showMessageDialog(this, "Plugin queued for uninstallation. Restart Savant \n" +
                     "for changes to take effect. If the plugin remains \n" +
                     "installed, you can manually remove it by deleting the \n" +
                     "appropriate .jar file from the plugins directory.");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error removing plugin." +
                        "\nYou can manually remove it by deleting the appropriate \n" +
                        ".jar file from the plugins directory.");
                return;
            }

             
        }
    }

    public static void copyFile(File in, File out) throws Exception {
        FileInputStream fis  = new FileInputStream(in);
        FileOutputStream fos = new FileOutputStream(out);
        try {
            byte[] buf = new byte[1024];
            int i = 0;
            while ((i = fis.read(buf)) != -1) {
                fos.write(buf, 0, i);
            }
        }
        catch (Exception e) {
            throw e;
        }
        finally {
            if (fis != null) fis.close();
            if (fos != null) fos.close();
        }
    }
}
