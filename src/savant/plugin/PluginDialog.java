/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PluginManager.java
 *
 * Created on Mar 9, 2010, 10:11:36 AM
 */

package savant.plugin;

import java.awt.FileDialog;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FilenameFilter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;

/**
 *
 * @author mfiume
 */
public class PluginDialog extends javax.swing.JFrame {

    public static String pluginDir = "plugins";

    /** Creates new form PluginManager */
    public PluginDialog() {
        initComponents();
        this.setTitle("Plugin Manager");
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.setResizable(false);
        updatePluginList();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        list_installedplugins = new javax.swing.JList(new DefaultListModel());
        button_remove = new javax.swing.JButton();
        button_add = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Installed Plugins");

        list_installedplugins.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(list_installedplugins);

        button_remove.setText("Remove");
        button_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_removeActionPerformed(evt);
            }
        });

        button_add.setText("Add");
        button_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_addActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(152, Short.MAX_VALUE)
                .addComponent(button_add)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(button_remove)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_remove)
                    .addComponent(button_add))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_addActionPerformed
        addPlugin();
    }//GEN-LAST:event_button_addActionPerformed

    private void button_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_removeActionPerformed
        removePlugin();
    }//GEN-LAST:event_button_removeActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PluginDialog().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_add;
    private javax.swing.JButton button_remove;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList list_installedplugins;
    // End of variables declaration//GEN-END:variables

    private void updatePluginList() {
        DefaultListModel model = (DefaultListModel) this.list_installedplugins.getModel();
        model.removeAllElements();

        File dir = new File(pluginDir);

        // It is also possible to filter the list of returned files.
        // This example does not return any files that start with `.'.
        FilenameFilter filter = new FilenameFilter() {
            public boolean accept(File dir, String name) {
                return name.endsWith(".jar");
            }
        };
        String[] children  = dir.list(filter);

        if (children == null) {
            // Either dir does not exist or is not a directory
        } else {
            for (int i=0; i<children.length; i++) {
                // Get filename of file or directory
                 model.add(i, children[i]);
            }
        }
    }

    private void addPlugin() {

        // create a frame and place the dialog in it
        JFrame jf = new JFrame();
        FileDialog fd = new FileDialog(jf, "Add Plugin", FileDialog.LOAD);

        fd.setVisible(true);
        jf.setAlwaysOnTop(true);

        // get the path (null if none selected)
        String selectedFileName = fd.getFile();

        // copy the plugin
        if (selectedFileName != null) {
            try {
                int lastSlashIndex = selectedFileName.lastIndexOf(System.getProperty("file.separator"));
                String name = selectedFileName.substring(lastSlashIndex + 1, selectedFileName.length());

                copyFile(new File(fd.getDirectory() + System.getProperty("file.separator") + selectedFileName), new File(pluginDir + System.getProperty("file.separator") + name));

                updatePluginList();

            // error copying file
            } catch (Exception ex) {
                Logger.getLogger(PluginDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void removePlugin() {

        try {
            String pluginFileName = (String) this.list_installedplugins.getSelectedValue();

            if (pluginFileName.equals("SavantCore.jar") || pluginFileName.equals("SavantData.jar")) {
                return;
            }

            DefaultListModel model = (DefaultListModel) this.list_installedplugins.getModel();
            
            File f = new File(pluginDir + System.getProperty("file.separator") + pluginFileName);
            boolean success = f.delete();

            if (success) {
                model.removeElement(pluginFileName);
                updatePluginList();
            }
        } catch (Exception e) {}
    }

    public static void copyFile(File in, File out) throws Exception {
        FileInputStream fis  = new FileInputStream(in);
        FileOutputStream fos = new FileOutputStream(out);
        try {
            byte[] buf = new byte[1024];
            int i = 0;
            while ((i = fis.read(buf)) != -1) {
                fos.write(buf, 0, i);
            }
        }
        catch (Exception e) {
            throw e;
        }
        finally {
            if (fis != null) fis.close();
            if (fos != null) fos.close();
        }
    }
}
